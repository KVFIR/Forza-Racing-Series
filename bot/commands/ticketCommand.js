import { 
  InteractionType, 
  InteractionResponseType
} from 'discord-interactions';
import { ref, set, get } from 'firebase/database';
import { db } from '../firebase.js';
import { sendLog } from './loggingCommand.js';

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
export async function handleCreateTicketButton(req, res) {
  try {
    return res.send({
      type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
      data: {
        content: "üèÅ **Race Incident Report**\nUse this button to report any incidents that occurred during the race.",
        components: [
          {
            type: 1,
            components: [
              {
                type: 2,
                custom_id: "create_incident_ticket",
                label: "Report Incident",
                style: 1,
                emoji: {
                  name: "üö®"
                }
              }
            ]
          }
        ],
        flags: 0 // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º
      }
    });
  } catch (error) {
    console.error('Error creating ticket button:', error);
    return res.send({
      type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
      data: {
        content: "Failed to create incident report button. Error: " + error.message,
        flags: 64 // –û—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —ç—Ñ–µ–º–µ—Ä–Ω—ã–º–∏
      }
    });
  }
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
export async function handleShowTicketModal(req, res) {
  try {
    console.log('Showing ticket modal');
    const modalData = {
      type: InteractionResponseType.MODAL,
      data: {
        title: "Race Incident Report",
        custom_id: `ticket_modal_${Date.now()}`,
        components: [
          {
            type: 1,
            components: [
              {
                type: 4,
                custom_id: "involved_users",
                label: "Involved Participants",
                style: 2,
                min_length: 1,
                max_length: 1000,
                required: true,
                placeholder: "List the XBOX Gamertags of participants involved in the incident (e.g., Gamertag1, Gamertag2)"
              }
            ]
          },
          {
            type: 1,
            components: [
              {
                type: 4,
                custom_id: "video_link",
                label: "Video Evidence",
                style: 1,
                min_length: 1,
                max_length: 500,
                required: true,
                placeholder: "Paste a link to your video evidence"
              }
            ]
          },
          {
            type: 1,
            components: [
              {
                type: 4,
                custom_id: "comment",
                label: "Additional Comments (optional)",
                style: 2,
                required: false,
                max_length: 1000,
                placeholder: "Add any additional context or comments about the incident"
              }
            ]
          }
        ]
      }
    };

    console.log('Sending modal data:', JSON.stringify(modalData));
    return res.send(modalData);
  } catch (error) {
    console.error('Error showing modal:', error);
    return res.send({
      type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
      data: {
        content: "Failed to show report form.",
        flags: 64
      }
    });
  }
}

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–∏–∫–µ—Ç–∞
async function getNextTicketNumber(guildId) {
  const ticketsRef = ref(db, `ticket_counters/${guildId}`);
  const snapshot = await get(ticketsRef);
  const currentNumber = snapshot.exists() ? snapshot.val().current : 1000;
  const nextNumber = currentNumber + 1;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
  await set(ticketsRef, {
    current: nextNumber,
    updated_at: Date.now()
  });
  
  return nextNumber;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
export async function handleTicketSubmit(req, res) {
  console.log('Handling ticket submit');
  const { member, data, guild_id, channel_id } = req.body;
  
  // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  res.send({
    type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
    data: {
      content: "‚úÖ Your incident report has been submitted! A private thread has been created.",
      flags: 64 // –≠—Ñ–µ–º–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    }
  });

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞
    const ticketNumber = await getNextTicketNumber(guild_id);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –∏–∑ Firebase
    const rolesSnapshot = await get(ref(db, `guild_roles/${guild_id}`));
    const raceControlRoleId = rolesSnapshot.val()?.race_control_role;

    if (!raceControlRoleId) {
      console.error('Race Control role not found for guild:', guild_id);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—É—é –≤–µ—Ç–∫—É –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–∞–Ω–∞–ª–µ
    const threadResponse = await fetch(`https://discord.com/api/v10/channels/${channel_id}/threads`, {
      method: 'POST',
      headers: {
        Authorization: `Bot ${process.env.DISCORD_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        name: `ticket-${ticketNumber}-${member.user.username}`,
        type: 12, // GUILD_PRIVATE_THREAD
        auto_archive_duration: 1440, // 24 —á–∞—Å–∞
        invitable: false
      })
    });

    if (!threadResponse.ok) {
      throw new Error('Failed to create thread');
    }

    const thread = await threadResponse.json();

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ —Ç–∏–∫–µ—Ç–∞ –≤ –≤–µ—Ç–∫—É
    await fetch(`https://discord.com/api/v10/channels/${thread.id}/thread-members/${member.user.id}`, {
      method: 'PUT',
      headers: {
        Authorization: `Bot ${process.env.DISCORD_TOKEN}`
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º Race Control –≤ –≤–µ—Ç–∫—É
    if (raceControlRoleId) {
      await fetch(`https://discord.com/api/v10/channels/${thread.id}/thread-members/${raceControlRoleId}`, {
        method: 'PUT',
        headers: {
          Authorization: `Bot ${process.env.DISCORD_TOKEN}`
        }
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–∏–≤–∞—Ç–Ω—É—é –≤–µ—Ç–∫—É —Å –ø–∏–Ω–≥–æ–º Race Control –∏ –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
    await fetch(`https://discord.com/api/v10/channels/${thread.id}/messages`, {
      method: 'POST',
      headers: {
        Authorization: `Bot ${process.env.DISCORD_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        content: `<@&${raceControlRoleId}>\n\n**Race Incident Report #${ticketNumber}**\nReporter: <@${member.user.id}>\nInvolved Users: ${data.components[0].components[0].value}\nVideo Evidence: ${data.components[1].components[0].value}\nComments: ${data.components[2].components[0].value || 'None'}`,
        components: [
          {
            type: 1,
            components: [
              {
                type: 2,
                custom_id: `close_ticket_${ticketNumber}`,
                label: "Close Ticket",
                style: 4, // –ö—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                emoji: {
                  name: "üîí"
                }
              }
            ]
          }
        ]
      })
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const ticketRef = ref(db, `tickets/${guild_id}/${ticketNumber}`);
    await set(ticketRef, {
      ticket_number: ticketNumber,
      reporter: {
        id: member.user.id,
        username: member.user.username
      },
      involved_users: data.components[0].components[0].value,
      video_link: data.components[1].components[0].value,
      comment: data.components[2].components[0].value || null,
      status: 'open',
      thread_id: thread.id,
      channel_id: channel_id,
      created_at: Date.now()
    });

    await sendLog(guild_id, `üé´ **New Ticket Created**
‚Ä¢ Ticket: #${ticketNumber}
‚Ä¢ Reporter: <@${member.user.id}>
‚Ä¢ Thread: <#${thread.id}>`);

  } catch (error) {
    console.error('Error in handleTicketSubmit:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
export async function handleCloseTicket(req, res) {
  console.log('Handling close ticket:', req.body);
  const { member, guild_id, data } = req.body;
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞ –∏–∑ custom_id –∫–Ω–æ–ø–∫–∏
  const ticketNumber = data.custom_id.replace('close_ticket_', '');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const rolesSnapshot = await get(ref(db, `guild_roles/${guild_id}`));
    const raceControlRoleId = rolesSnapshot.val()?.race_control_role;

    const hasPermission = member.permissions === "8" || // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
                         member.roles.includes(raceControlRoleId); // Race Control

    if (!hasPermission) {
      return res.send({
        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
        data: {
          content: "‚ùå You don't have permission to close tickets!",
          flags: 64
        }
      });
    }

    // –ü–æ–ª—É—áÔøΩÔøΩ–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
    const ticketRef = ref(db, `tickets/${guild_id}/${ticketNumber}`);
    const ticketSnapshot = await get(ticketRef);
    const ticket = ticketSnapshot.val();

    if (!ticket) {
      throw new Error('Ticket not found');
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç–∏–∫–µ—Ç–∞ –∏–∑ –≤–µ—Ç–∫–∏
    await fetch(`https://discord.com/api/v10/channels/${ticket.thread_id}/thread-members/${ticket.reporter.id}`, {
      method: 'DELETE',
      headers: {
        Authorization: `Bot ${process.env.DISCORD_TOKEN}`
      }
    });

    // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤–µ—Ç–∫—É
    await fetch(`https://discord.com/api/v10/channels/${ticket.thread_id}`, {
      method: 'PATCH',
      headers: {
        Authorization: `Bot ${process.env.DISCORD_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        archived: true,
        locked: true
      })
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await set(ticketRef, {
      ...ticket,
      status: 'closed',
      closed_by: {
        id: member.user.id,
        username: member.user.username
      },
      closed_at: Date.now()
    });

    await sendLog(guild_id, `üîí **Ticket Closed**
‚Ä¢ Ticket: #${ticketNumber}
‚Ä¢ Closed by: <@${member.user.id}>
‚Ä¢ Reporter: <@${ticket.reporter.id}>`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    return res.send({
      type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
      data: {
        content: `‚úÖ Ticket #${ticketNumber} has been closed.`,
        flags: 64
      }
    });

  } catch (error) {
    console.error('Error closing ticket:', error);
    return res.send({
      type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
      data: {
        content: "Failed to close ticket. Error: " + error.message,
        flags: 64
      }
    });
  }
}