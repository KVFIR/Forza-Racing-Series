import { InteractionResponseType } from 'discord-interactions';
import { eventService } from '../services/eventService.js';

export async function handleProfile(req, res) {
  const { guild_id, member: { user: { id: userId, username } } } = req.body;

  try {
    try {
      await eventService.migrateEvents(guild_id);
    } catch (migrationError) {
      console.error('Migration error:', migrationError);
    }
    
    const userEvents = await eventService.getUserEvents(guild_id, userId);
    
    if (!userEvents || userEvents.length === 0) {
      return res.send({
        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
        data: {
          content: "You haven't registered for any events yet!",
          flags: 64
        }
      });
    }

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –ø—Ä–æ—Ñ–∏–ª—è
    let message = `# üèÅ Racing Profile: ${username}\n\n`;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += `## üìä Statistics\n`;
    message += `‚Ä¢ Total Events: ${userEvents.length}\n`;
    message += `‚Ä¢ Active Events: ${userEvents.filter(e => !e.completed).length}\n`;
    message += `‚Ä¢ Completed Events: ${userEvents.filter(e => e.completed).length}\n\n`;

    // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    const activeEvents = userEvents.filter(e => !e.completed);
    if (activeEvents.length > 0) {
      message += `## üèéÔ∏è Upcoming Events\n`;
      for (const event of activeEvents) {
        const registration = event.participants.find(p => p.id === userId);
        
        message += `### ${event.title}\n`;
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
        message += `**Event Details:**\n`;
        if (event.date) message += `‚Ä¢ Date: <t:${Math.floor(event.date/1000)}:F>\n`;
        message += `‚Ä¢ Participants: ${event.participants?.length || 0}/${event.max_participants}\n`;
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        message += `\n**Your Registration:**\n`;
        message += `‚Ä¢ XBOX: ${registration.xbox_nickname}\n`;
        if (registration.twitch_username) {
          message += `‚Ä¢ Twitch: <https://twitch.tv/${registration.twitch_username}>\n`;
        }
        message += `‚Ä¢ Car: ${registration.car_choice}\n`;
        message += `‚Ä¢ Registered: <t:${Math.floor(registration.registered_at/1000)}:R>\n\n`;
      }
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    const completedEvents = userEvents.filter(e => e.completed);
    if (completedEvents.length > 0) {
      message += `## üèÜ Past Events\n`;
      for (const event of completedEvents) {
        const registration = event.participants.find(p => p.id === userId);
        
        message += `### ${event.title}\n`;
        // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è
        if (event.results) {
          const userResult = event.results.find(r => r.userId === userId);
          if (userResult) {
            message += `‚Ä¢ Position: ${userResult.position}\n`;
            if (userResult.points) message += `‚Ä¢ Points: ${userResult.points}\n`;
          }
        }
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        message += `‚Ä¢ Car Used: ${registration.car_choice}\n`;
        if (event.date) message += `‚Ä¢ Completed: <t:${Math.floor(event.date/1000)}:D>\n\n`;
      }
    }

    return res.send({
      type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
      data: {
        content: message,
        flags: 64
      }
    });

  } catch (error) {
    console.error('Error handling profile command:', error);
    return res.send({
      type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
      data: {
        content: process.env.NODE_ENV === 'development' ? 
          `‚ö†Ô∏è Error: ${error.message}` :
          "‚ö†Ô∏è Failed to load profile. Please try again later.",
        flags: 64
      }
    });
  }
} 