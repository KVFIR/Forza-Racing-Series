import { InteractionResponseType } from 'discord-interactions';
import { eventService } from '../services/eventService.js';

export async function handleEventParticipants(req, res) {
  const { guild_id } = req.body;
  const targetMessage = req.body.data.resolved.messages[Object.keys(req.body.data.resolved.messages)[0]];
  const { id: messageId, channel_id } = targetMessage;

  try {
    console.log('Handling event participants command:', {
      guildId: guild_id,
      channelId: channel_id,
      messageId
    });

    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–±—ã—Ç–∏–µ
    const event = await eventService.findEvent(messageId, channel_id);
    if (!event) {
      return res.send({
        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
        data: {
          content: "‚ö†Ô∏è Event not found. Please check the message ID.",
          flags: 64
        }
      });
    }

    const { eventData } = event;
    const participants = eventData.participants || [];

    if (participants.length === 0) {
      return res.send({
        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
        data: {
          content: "No participants registered for this event yet.",
          flags: 64
        }
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    let message = `**üìã Participants List - ${eventData.title}**\n`;
    message += `Total: ${participants.length}/${eventData.max_participants}\n\n`;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants.forEach((p, index) => {
      const twitchInfo = p.twitch_username ? `[${p.twitch_username}](https://twitch.tv/${p.twitch_username})` : 'N/A';
      message += `${index + 1}. <@${p.id}>\n`;
      message += `   ‚Ä¢ Xbox: ${p.xbox_nickname}\n`;
      message += `   ‚Ä¢ Twitch: ${twitchInfo}\n`;
      message += `   ‚Ä¢ Car: ${p.car_choice}\n\n`;
    });

    return res.send({
      type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
      data: {
        content: message,
        flags: 64 // –í–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –∫–æ–º–∞–Ω–¥—ã
      }
    });

  } catch (error) {
    console.error('Error in handleEventParticipants:', error);
    return res.send({
      type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
      data: {
        content: "‚ö†Ô∏è Failed to get participants list. Please try again later.",
        flags: 64
      }
    });
  }
} 